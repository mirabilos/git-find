#!/bin/mksh
# -*- mode: sh -*-
#-
# Copyright © 2015, 2016
#	mirabilos <t.glaser@tarent.de>
# Copyright © 2017
#	mirabilos <m@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un‐
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person’s immediate fault when using the work as intended.

set -o pipefail

cleanup() {
	exit $1
}

die() {
	print -ru2 -- "E: $*"
	cleanup 2
}

usage() {
	print -ru2 -- "Usage:"
	print -ru2 -- "	${0##*/} [-gitfiles] [-E] [subdir ...] [condition | pattern] [-print0]"
	print -ru2 -- "	${0##*/} [-gitfiles] [subdir ...] -- find_options"
	print -ru2 -- "Conditions can be parenthesised, bang-negated, combined with -a or -o, or:"
	print -ru2 -- "	{ -[i]name | -[i]path | -[i]regex } pattern"
	cleanup ${1:-2}
}

lvl=0
parse_or() {
	(( ++lvl ))
	cat >"$T/tmpi$lvl" || die "cannot update temporary file"
	true >"$T/tmpo$lvl" || die "cannot update temporary file"
	while :; do
		parse_and <"$T/tmpi$lvl" >>"$T/tmpo$lvl" || \
		    die "cannot update temporary file"
		(( ${#args[*]} )) || break
		[[ ${args[0]} = \) ]] && break
		[[ ${args[0]} = -o ]] || usage
		unset args[0]
		(( ${#args[*]} )) || usage
		set -A args -- "${args[@]}"
	done
	LC_ALL=C sort -zu <"$T/tmpo$lvl"
	(( e = $? )) && die "sort died with errorlevel $e"
	(( --lvl ))
	:
}

parse_and() {
	(( ++lvl ))
	cat >"$T/tmpi$lvl" || die "cannot update temporary file"
	while :; do
		parse_not <"$T/tmpi$lvl" >"$T/tmpo$lvl" || \
		    die "cannot update temporary file"
		(( ${#args[*]} )) || break
		[[ ${args[0]} = \) ]] && break
		[[ ${args[0]} = -o ]] && break
		[[ ${args[0]} = -a ]] || usage
		unset args[0]
		(( ${#args[*]} )) || usage
		set -A args -- "${args[@]}"
		mv "$T/tmpo$lvl" "$T/tmpi$lvl" || \
		    die "cannot update temporary file"
	done
	cat "$T/tmpo$lvl" || die "cannot read temporary file"
	(( --lvl ))
	:
}

parse_not() {
	local notf=0

	set -- "${args[@]}"
	while [[ $1 = '!' ]]; do
		(( notf = !notf ))
		shift
	done
	(( $# )) || usage
	set -A args -- "$@"

	if (( notf )); then
		(( ++lvl ))
		cat >"$T/tmpi$lvl" || die "cannot update temporary file"
		LC_ALL=C tr '\n\0' '\0\n' <"$T/tmpi$lvl" >"$T/tmpn$lvl" || \
		    die "cannot update temporary file"
		parse_parens <"$T/tmpi$lvl" >"$T/tmpo$lvl" || \
		    die "cannot update temporary file"
		<"$T/tmpo$lvl" \
		    LC_ALL=C tr '\n\0' '\0\n' | \
		    LC_ALL=C comm -23 "$T/tmpn$lvl" - | \
		    LC_ALL=C tr '\n\0' '\0\n' || \
		    die "cannot update temporary file"
		(( --lvl ))
	else
		parse_parens
	fi
	:
}

parse_parens() {
	if [[ ${args[0]} = \( ]]; then
		unset args[0]
		(( ${#args[*]} )) || usage
		set -A args -- "${args[@]}"
		parse_or
		[[ ${args[0]} = \) ]] || usage
		unset args[0]
		set -A args -- "${args[@]}"
	else
		parse_cmd
	fi
	:
}

parse_cmd() {
	set -- "${args[@]}"
	(( $# < 2 )) && usage
	[[ $1 = '-'?(i)@(name|path|regex|wholename) ]] || usage
	"do_${1#-}" "$2"
	shift 2
	set -A args -- "$@"
	:
}

do_regex() {
	grep $egrep -azxe "$1"
	(( (e = $?) > 1 )) && die "grep died with errorlevel $e"
	:
}
do_iregex() {
	grep $egrep -azxie "$1"
	(( (e = $?) > 1 )) && die "grep died with errorlevel $e"
	:
}

do_wholename() {
	do_path "$@"
}
do_path() {
	# ugh, was originally thinking of converting
	# the pattern to regex and calling grep -z
	# turns out conversion is nontrivial
	local name
	while IFS= read -d '' -r name; do
		[[ $name = $1 ]] || continue
		print -nr -- "$name"
		print -n '\0'
	done
	:
}
do_iwholename() {
	do_ipath "$@"
}
do_ipath() {
	local name
	local -l lcname pattern=$1
	while IFS= read -d '' -r name; do
		lcname=$name
		[[ $lcname = $pattern ]] || continue
		print -nr -- "$name"
		print -n '\0'
	done
	:
}

do_name() {
	local name pname
	while IFS= read -d '' -r name; do
		pname=${name##*/}
		[[ $pname = $1 ]] || continue
		print -nr -- "$name"
		print -n '\0'
	done
	:
}
do_iname() {
	local name
	local -l lcname pattern=$1
	while IFS= read -d '' -r name; do
		lcname=${name##*/}
		[[ $lcname = $pattern ]] || continue
		print -nr -- "$name"
		print -n '\0'
	done
	:
}

T=$(mktemp -d "${TMPDIR:-/tmp}/git-find.XXXXXXXXXX") || \
    die Cannot create temporary directory
cleanup() {
	cd /
	rm -rf "$T"
	exit $1
}

set -A args -- "$@"
if [[ ${args[${#args[*]}-1]} = -print0 ]]; then
	unset args[${#args[*]}-1]
	set -- "${args[@]}"
	output() {
		cat "$1"
	}
else
	output() {
		LC_ALL=C tr '\0' '\n' <"$1"
	}
fi

egrep=
c=
alias skip_modes='[[ ${meta[0]} = 160000 ]]'
set -A subdir_prefilter
while (( $# )); do
	case $1 {
	(-E)
		egrep=-E
		;;
	(-gitfiles)
		alias skip_modes='[[ ${meta[0]} = 1[26]0000 ]]'
		;;
	(!|\(|-iname|-ipath|-iregex|-iwholename|-name|-path|-regex|-wholename) #)
		c=mode
		;;
	(--)
		shift
		c=patdash
		;;
	(-*)
		usage
		;;
	(*)
		if [[ -d $1 ]]; then
			subdir_prefilter+=("$1")
		else
			c=pattern
		fi
		;;
	}
	[[ -n $c ]] && break
	shift
done

function acquire_names {
	local line name meta last0 last2 lastn

	while IFS= read -d '' -r line; do
		if [[ $line != +([0-9a-f ])'	'* ]]; then
			print -ru2 "E: invalid ls-files output line: $line"
			return 2
		fi
		name=${line#*	}
		meta=${line%%	*}
		if [[ $meta != @(100644|100755|120000|160000)' '+([0-9a-f])' '[0-3] ]]; then
			print -ru2 "E: invalid ls-files output meta: $line"
			return 2
		fi
		set -A meta -- $meta
		if [[ $name != "$lastn" ]]; then
			last2=0
			lastn=$name
		fi
		case $last2:${meta[2]} {
		(0:0)
			;;
		(0:[12])
			last0=${meta[0]}
			last2=${meta[2]}
			continue
			;;
		(1:2)
			if [[ $last0 != "${meta[0]}" ]]; then
				print -ru2 "E: unresolved conflicts: $line"
				return 2
			fi
			last2=${meta[2]}
			continue
			;;
		([12]:3)
			if [[ $last0 != "${meta[0]}" ]]; then
				print -ru2 "E: unresolved conflicts: $line"
				return 2
			fi
			last2=0
			;;
		(*)
			print -ru2 "E: unexpected ($last2) ls-files stage: $line"
			return 2
			;;
		}
		# do not recurse into submodules; exclude symlinks if -gitfiles
		skip_modes && continue
		# regular blob (possibly executable) or (maybe) symlink(7)
		print -nr -- "$name"
		print -n '\0'
	done
	if [[ $last2 != 0 ]]; then
		print -ru2 "E: missing (after $last2) ls-files stage at EOF"
		return 2
	fi
	return 0
}

git ls-files -z --stage -- "${subdir_prefilter[@]}" | acquire_names | \
    LC_ALL=C sort -z >"$T/lst"
set -A rva -- "${PIPESTATUS[@]}"
[[ ${rva[0]} = 0 ]] || die "git ls-tree died with errorlevel ${rva[0]}"
[[ ${rva[1]} = 0 ]] || die "acquire_names died with errorlevel ${rva[1]}"
[[ ${rva[2]} = 0 ]] || die "sort died with errorlevel ${rva[2]}"

case $#:$c {
(0:|0:patdash)
	mv "$T/lst" "$T/dst" || die "cannot update temporary file"
	;;
(*:patdash)
	pfx=
	LC_ALL=C grep -azq '^-' "$T/lst"
	pfx=$?
	case $pfx {
	(0) pfx=./ ;;
	(1) pfx= ;;
	(*) die "grep died with errorlevel $pfx" ;;
	}
	set -A args
	nargs=0
	while IFS= read -d '' -r name; do
		args[nargs++]=$pfx$name
	done <"$T/lst"
	find -- "${args[@]}" "$@"
	cleanup $?
	;;
(1:pattern)
	do_name "$1" <"$T/lst" >"$T/dst" || die "cannot update temporary file"
	;;
(*:mode)
	set -A args -- "$@"
	parse_or <"$T/lst" >"$T/dst" || die "cannot update temporary file"
	(( ${#args[*]} )) && usage
	;;
(*)
	usage
	;;
}

[[ -s $T/dst ]] || cleanup 1
output "$T/dst" || die "cannot read temporary file"
cleanup 0
